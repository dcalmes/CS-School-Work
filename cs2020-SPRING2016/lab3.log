Script started on Sun Mar 20 18:52:52 2016
sh-4.3$ ls -l
total 296
-rwxr-xr-x   1 dcalmes  ics2020    21176 Mar 16 02:34 a.out
-rw-rwx---   1 dcalmes  ics2020     4073 Mar 14 09:29 lab1.cpp
-rw-rwx---   1 dcalmes  ics2020     6188 Mar 14 09:31 lab1.log
-rw-rwx---   1 dcalmes  ics2020     4458 Mar 14 10:03 lab2.cpp
-rw-rwx---   1 dcalmes  ics2020     8365 Mar 14 10:07 lab2.log
-rw-r--r--   1 dcalmes  ics2020     7472 Mar 19 16:57 lab3.cpp
-rw-r--r--   1 dcalmes  user           0 Mar 20 18:52 lab3.log
-rw-r--r--   1 dcalmes  ics2020      626 Jan 29  2013 lab3.txt
-rw-rwx---   1 dcalmes  ics2020     7109 Feb 24 18:47 lab4.cpp
-rw-rwx---   1 dcalmes  ics2020    13304 Feb 24 18:53 lab4.log
-rw-rwx---   1 dcalmes  ics2020      400 Feb 24 17:56 lab4.txt
-rw-rwx---   1 dcalmes  ics2020     5645 Mar  2 18:51 lab5.cpp
-rw-rwx---   1 dcalmes  ics2020    10026 Mar  2 18:54 lab5.log
-rw-rwx---   1 dcalmes  ics2020      315 Mar  2 14:40 lab5.txt
lrwxrwxrwx   1 dcalmes  ics2020       24 Feb  5 16:39 lib -> /home/classes/cs2020/Lib
-rw-r--r--   1 dcalmes  ics2020    12117 Mar 16 02:15 prog1.cpp
-rw-r--r--   1 dcalmes  user       18769 Mar 16 02:34 prog1.log
-rw-r--r--   1 dcalmes  ics2020      400 Jan  1  2015 prog1.txt
-rw-rwx---   1 dcalmes  ics2020     6668 Feb 23 20:06 prog3.cpp
-rw-rwx---   1 dcalmes  ics2020     9502 Feb 19 20:20 prog3.log
-rw-rwx---   1 dcalmes  ics2020      259 Jan  1  2015 prog3.txt
-rw-rwx---   1 dcalmes  ics2020     1738 Feb 26 17:25 prog4.cpp
-rw-rwx---   1 dcalmes  ics2020      649 Mar  6  2015 prog4.txt
-rw-rwx---   1 dcalmes  ics2020       54 Mar 14 09:10 sample.txt
sh-4.3$ cat lab3.cpp
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Program:     Lab 3
// Purpose:     This programs purpose is to show gold, silver, and bronze memberships and their statistics overall.
// Input:               The input file of this program is lab3.txt.  User inputs the numbers they want to see.
// Processing:  Different functions to perform:
//                                              void menu();
//                                                              -This function take the data and shows the data of what type of shares they want to see.
//                                                                      It shows each member of each membership along side the amount of shares they have.
//                                                                      Finally, it shows the member with the most shares, and how many they have.
//                                              void value();
//                                                              -This function takes the input data and prints out the amount of shares each membership
//                                                                      has and also the value of all the stocks based on their individual value.
// Output:              This program outputs the shareholders for either gold, silver, and bronze memberships.  It also outputs
//                              the quantity of each shares along side their value.
// Programmer:  Douglas Calmes
// Class:       CS 2020 Spring 2016
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <iostream> 
#include <string>
#include <iomanip>
#include <fstream>

using namespace std;

// Shareholder Structure
struct Shareholder
{
        string name;
        string shareType;
        double numberShares;
};

// Prototypes
void menu(Shareholder[], int, string);
void value(Shareholder[], int);

// Max elements
const int MAXSTUD = 50;


int main()
{
        Shareholder ClientList[MAXSTUD];

        string choice;
        int numClients = 0;
        ifstream inputFile;
        string Share;

//      This is where we open the lab3.txt and read its contents, putting them into an array.

        inputFile.open("lab3.txt");

        if (inputFile)
        {
                while (!inputFile.eof())
                {
                        getline(inputFile, ClientList[numClients].name);
                        inputFile >> ClientList[numClients].shareType;
                        inputFile >> ClientList[numClients].numberShares;
                        inputFile.ignore();
                        numClients++;
                }
                inputFile.close();
        }
        else
        {
                cout << "ERROR: File not found" << endl;
        }

//      Do-While loop until the user inputs "Done"

                do
                {       
                        cout << "Share type [Gold : Silver : Bronze : Done]: ";
                        cin >> Share;

                        if (Share == "Gold")
                        {
                                menu(ClientList, numClients, Share);
                        }
                        if (Share == "Bronze")
                        {
                                menu(ClientList, numClients, Share);
                        }
                        if (Share == "Silver" )
                        {
                                menu(ClientList, numClients, Share);
                        }
                        if (Share != "Gold" && Share != "Silver" && Share != "Bronze" && Share != "Done")
                        {
                                cout << "Invalid tyle!" << endl;
                        }
                } while (Share != "Done");

                value(ClientList, numClients);

        system("Pause");
        return 0;
}

//////////////////////////////////////////////////////////////////////////////
// Lab 3                                                                                                                                                                                                                                            /      
// Programmer:          Douglas Calmes                                                                                   
// Class:           CS 2020, Spring 2016                                     
//                                                                           
// Function:        menu                                                   
// Description:     This function take the data and prints out the data.
//                                              It takes the share that the user inputs to see the
//                                              members and the shares they hold.  Also printing out
//                                              the member with the most shares and their count.
// Parameters:          ClientList[]- The array for the Shareholder structure
//                                      numClients-       The number of clients in the array.
//                                      Share-            The share that the user inputs in the main
// Returns:                     Nothing              
//////////////////////////////////////////////////////////////////////////////

void menu(Shareholder ClientList[], int numClients, string Share)
{
        int i = 0;
        int high = 0;
        string highClient;

        cout << "============================================================" << endl;
        cout << right << setw(20) << Share << " Clients" << endl;
        cout << "============================================================" << endl;

//      Finds all the members of the share that is wanted and prints out the members and their amount of shares

        while (i < numClients)
        {
                if (ClientList[i].shareType == Share)
                {
                        cout << left << setw(30) << ClientList[i].name << setw(20) << ClientList[i].numberShares << endl;

                        if (ClientList[i].numberShares > high)
                        {
                                high = ClientList[i].numberShares;
                                highClient = ClientList[i].name;
                        }
                }
                i++;
        }

        cout << ">>>> " << highClient << " has the most shares with " << high << endl << endl;
}

//////////////////////////////////////////////////////////////////////////////
// Lab 3                                                                                                                                                                                                                                            /      
// Programmer:          Douglas Calmes                                                                                   
// Class:           CS 2020, Spring 2016                                     
//                                                                           
// Function:        value                                                   
// Description:     This function prints out the quantity and value of
//                                              each shareholder type.  It calculates the quantity
//                                              and value based on the share cost.
// Parameters:          ClientList[]- The array for the Shareholder structure
//                                      numClients-       The number of clients in the array.
// Returns:                     Nothing              
//////////////////////////////////////////////////////////////////////////////

void value(Shareholder ClientList[], int numClients)
{
        int i = 0;
        double goldQty, silverQty, bronzeQty;
        double goldValue, silverValue, bronzeValue;
        double goldShare = 9.65, silverShare = 4.75, bronzeShare = 1.85;

//      While loop that takes the total shares of each membership and calculates the
//      the total quantity and value of each type of share

        while (i < numClients)
        {
                if (ClientList[i].shareType == "Gold")
                {
                        goldQty += ClientList[i].numberShares;
                        goldValue = goldQty * goldShare;
                }
                if (ClientList[i].shareType == "Silver")
                {
                        silverQty += ClientList[i].numberShares;
                        silverValue = silverQty * silverShare;
                }
                if (ClientList[i].shareType == "Bronze")
                {
                        bronzeQty += ClientList[i].numberShares;
                        bronzeValue = bronzeQty * bronzeShare;
                }
                i++;
        }

        cout << "=============================================" << endl;
        cout << left << setw(20) << "Share Type" << setw(20) << "Quantity" << setw(10) << "Value" << endl;
        cout << "=============================================" << endl;
        cout << left << setw(20) << "Gold" << setw(20) << goldQty << setw(10) << goldValue << endl;
        cout << left << setw(20) << "Silver" << setw(20) << silverQty << setw(10) << silverValue << endl;
        cout << left << setw(20) << "Bronze" << setw(20) << bronzeQty << setw(10) << bronzeValue << endl;

}

sh-4.3$ lab   g++ lab3.cpp
sh-4.3$ a.out
Share type [Gold : Silver : Bronze : Done]: Gold
============================================================
                Gold Clients
============================================================
Matt Johnson                  52                  
Andrew King                   78                  
Andrew Burrow                 8                   
Cory Boyce                    97                  
Heather Ramos                 85                  
Jun Fylaktou                  75                  
Levon Rodriguez               87                  
Michael Bylon                 27                  
Terry Curley                  63                  
>>>> Cory Boyce has the most shares with 97

Share type [Gold : Silver : Bronze : Done]: Silver
============================================================
              Silver Clients
============================================================
Adam Williams                 45                  
Andrew Rine                   89                  
Brandon Rubey                 98                  
Brittani Grunden              99                  
Charles Yang                  75                  
Corbin Bruns                  78                  
David August                  96                  
Isaiah Xie                    73                  
Melissa Spencer               54                  
Rachel Higgins                84                  
>>>> Brittani Grunden has the most shares with 99

Share type [Gold : Silver : Bronze : Done]: Bronze
============================================================
              Bronze Clients
============================================================
Andreas Bostater              89                  
Benjamin Paulus               69                  
Christian Dickey              62                  
Emily Auler                   85                  
Houston Cole                  76                  
Justin Welsh                  58                  
Laura Nissen                  69                  
Terrence Sprauer              78                  
>>>> Andreas Bostater has the most shares with 89

Share type [Gold : Silver : Bronze : Done]: done
Invalid tyle!
Share type [Gold : Silver : Bronze : Done]: Done
=============================================
Share Type          Quantity            Value     
=============================================
Gold                572                 5519.8    
Silver              791                 3757.25   
Bronze              6.21891e+175        1.1505e+176
sh: Pause: not found
sh-4.3$ exit

script done on Sun Mar 20 18:54:11 2016
