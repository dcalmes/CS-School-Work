Script started on Wed Mar 02 18:52:06 2016
sh-4.3$ ls -l
total 142
-rwxrwx---   1 dcalmes  ics2020    20716 Feb 24 19:35 a.out
-rw-rwx---   1 dcalmes  ics2020     7109 Feb 24 18:47 lab4.cpp
-rw-rwx---   1 dcalmes  ics2020    13304 Feb 24 18:53 lab4.log
-rw-rwx---   1 dcalmes  ics2020      400 Feb 24 17:56 lab4.txt
-rw-r--r--   1 dcalmes  ics2020     5645 Mar  2 18:51 lab5.cpp
-rw-r--r--   1 dcalmes  user           0 Mar  2 18:52 lab5.log
-rw-r--r--   1 dcalmes  ics2020      315 Mar  2 14:40 lab5.txt
lrwxrwxrwx   1 dcalmes  ics2020       24 Feb  5 16:39 lib -> /home/classes/cs2020/Lib
-rw-rwx---   1 dcalmes  ics2020     6668 Feb 23 20:06 prog3.cpp
-rw-rwx---   1 dcalmes  ics2020     9502 Feb 19 20:20 prog3.log
-rw-rwx---   1 dcalmes  ics2020      259 Jan  1  2015 prog3.txt
-rw-r--r--   1 dcalmes  ics2020     1738 Feb 26 17:25 prog4.cpp
-rw-r--r--   1 dcalmes  ics2020      649 Mar  6  2015 prog4.txt
sh-4.3$ cat lab5.cpp
// Lab 5
// Description: 
// Programmer:  Douglas G Calmes
// Class:               CS 2020, Spring 2016

#include <iostream>
#include <fstream>
#include <iomanip>
#include <string>

using namespace std;

//      Structures

struct Gift
{
        string desc;
        Gift* pNext;
};
struct Nice
{
        string name;
        Nice* pNext;
        Gift* pGiftHead;
};

//Prototypes

void createList(Nice* &);                       //      Create the Nice list
void printNiceList(Nice*);                      //      Display the nice list
void printGifts(Nice*, string);
void insertNice(Nice* &, Nice*);
void appendGift(Gift* &, Gift*);
void DeleteList(Nice*, Gift*);
int Menu();                                                     //      Menu function

int main()
{
        int choice = 0;
        string gifts;
        Nice* pNice = nullptr;
        Gift* pGift = nullptr;
        string childName;

        createList(pNice);

        // Do-While look to continually allow the user to execute the menu commands until finished.
        // This loop continues until the user inputs 3 to quit the program.

        do
        {
                choice = Menu();

                if (choice == 1)
                {
                        printNiceList(pNice);
                }

                if (choice == 2)
                {
                        cout << "Gift for whom? ";
                        cin.ignore();
                        cin >> childName;

                        printGifts(pNice, childName);
                }
                if (choice == 3)
                {
                        DeleteList(pNice, pGift);
                }
                if (choice != 1 && choice != 2 && choice != 3)
                {
                        cout << "ERROR: invalid choice.  Please re-enter" << endl;
                }
        } while (choice != 3);




        return 0;
        system("Pause");
}

// Function:    createList
// Description: The purpose of this function is to read in the data file and create
//                              a linked lists of the children (NOT including their gifts!).
// Programmer:  Douglas G Calmes
// Class:               CS 2020, Spring 2016
// Parameters:  pNice-  pointer to Nice Structure
// Returns:             This function is void.

void createList(Nice* & pNice)
{
        ifstream infile;

        infile.open("lab5.txt");

        Nice* pNew;
        Nice* pTemp;

        if (infile)
        {
                while (!infile.eof())
                {
                        pNew = new Nice;
                        pNew->pNext = nullptr;

                        string s, ss, gift;
                        int i, j;

                        getline(infile, s);
                        i = s.find(" ");
                        j = s.find(" ", i + 1);
                        ss = s.substr(0, i);
                        pNew->name = ss;

                        while (j != -1)
                        {
                                Gift* gTemp = new Gift;
                                gTemp->pNext = nullptr;
                                gift = s.substr(i + 1, j - i - 1);
                                gTemp->desc = gift;



                                i = j;
                                j = s.find(" ", i + 1);

                        }

                        if (pNice == nullptr)
                                pNice = pNew;
                        else
                        {
                                pTemp = pNice;

                                while (pTemp->pNext != nullptr)
                                {
                                        pTemp = pTemp->pNext;
                                }
                                pTemp->pNext = pNew;
                        }
                }
                infile.close();
        }
        else
                cout << "Error: File was not found!";
}

// Function:    appendGift
// Description: The purpose of this function is to append the gifts to a gift linked list.                      
// Programmer:  Douglas G Calmes
// Class:               CS 2020, Spring 2016
// Parameters:  pGift-  Head pointer to Gift Structure
//                              gTemp-  Temporary pointer to Gift Structure
// Returns:             This function is void.

void appendGift(Gift* & pGift, Gift* gTemp)
{
        
}

// Function:    insertNice
// Description: The purpose of this function is to insert into the nice list.
// Programmer:  Douglas G Calmes
// Class:               CS 2020, Spring 2016
// Parameters:  pNice-  Head pointer for Nice Structure
//                              pTemp-  Temporary pointer for Nice Structure
// Returns:             This function is void.

void insertNice(Nice* & pNice, Nice* pTemp)
{

}

// Function:    printGifts
// Description: The purpose of this function is to ask the user to input a child.
//                              This fuction will the search for the child and print out his/her gift list.
// Programmer:  Douglas G Calmes
// Class:               CS 2020, Spring 2016
// Parameters:  pNice-  Head pointer to Nice Structure
//                              childName-      Name of child they want the gifts to be output
// Returns:             This function is void.

void printGifts(Nice* pNice, string childName)
{
        Nice* pTemp = pNice;

        while (pTemp->pNext != nullptr && pTemp->name != childName)
        {
                pTemp = pTemp->pNext;
        }

        if (pTemp->pNext == nullptr)
        {
                cout << childName << " not on the list" << endl;
        }
        
        if (pTemp->name == childName)
        {
                cout << childName << pNice->pGiftHead << endl;
        }

}


// Function:    printNiceList
// Description: The purpose of this function is to print out the list of children on the nice list.
// Programmer:  Douglas G Calmes
// Class:               CS 2020, Spring 2016
// Parameters:  pNice-  Head pointer to the Nice Structure
// Returns:             This function is void.

void printNiceList(Nice* pNice)
{
        Nice* pTemp = pNice;
        int count = 1;

        while (pTemp != nullptr)
        {
                cout << right << setw(3) << count << left << ": " << pTemp->name << endl;

                count++;
                pTemp = pTemp->pNext;
        }
}

// Function:    Menu
// Description: This program is used to show the user the options to choose from and asks them to input their choice
// Programmer:  Douglas G Calmes
// Class:               CS 2020, Spring 2016
// Parameters:  
// Returns:             option- this allows the program to use the option that the user has chosen inside the loop

int Menu()
{
        int option;

        cout << "---------------" << endl;
        cout << "1.Print Nice" << endl;
        cout << "2.Print Gifts" << endl;
        cout << "3.Quit" << endl;
        cout << "Choice ";
        cin >> option;
        cout << "---------------" << endl;

        return option;
}



void DeleteList(Nice* pNice, Gift* pGift)
{
        Nice* pTemp;
        Gift* gTemp;

        pTemp = pNice;
        gTemp = pGift;

        while (pTemp != nullptr && gTemp != nullptr)
        {
                // save pointer to next node in the list 
                pNice = pTemp->pNext;
                pGift = gTemp->pNext;

                delete pTemp;
                delete gTemp;

                // start traversing at next node 
                pTemp = pNice;
                gTemp = pGift;
        }
}
sh-4.3$ g++ lab5.cpp
ash-4.3$ a.out
---------------
1.Print Nice
2.Print Gifts
3.Quit
Choice 1
---------------
  1: Jennifer
  2: Jack
  3: Joan
  4: Anna
  5: Becky
  6: Ben
  7: Jim
  8: Autumn
  9: Zoe
 10: Mark
 11: Jeff
---------------
1.Print Nice
2.Print Gifts
3.Quit
Choice 2
---------------
Gift for whom? Becky
Becky not on the list
---------------
1.Print Nice
2.Print Gifts
3.Quit
Choice 2
---------------
Gift for whom? Jadwiga
Jadwiga not on the list
---------------
1.Print Nice
2.Print Gifts
3.Quit
Choice 0
---------------
ERROR: invalid choice.  Please re-enter
---------------
1.Print Nice
2.Print Gifts
3.Quit
Choice 10
---------------
ERROR: invalid choice.  Please re-enter
---------------
1.Print Nice
2.Print Gifts
3.Quit
Choice 2
---------------
Gift for whom? Anna
Anna0
---------------
1.Print Nice
2.Print Gifts
3.Quit
Choice 3
---------------
sh-4.3$ exit

script done on Wed Mar 02 18:54:00 2016
