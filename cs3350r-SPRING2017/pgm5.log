Script started on Tue Apr 25 08:40:13 2017
sh-4.3$ pwd
/home/93/dcalmes/cs3350r
sh-4.3$ ls -l
total 294
-rw-r--r--   1 dcalmes  ics3350r    1344 Mar 25 17:24 ArrayQueue.cpp
-rw-r--r--   1 dcalmes  ics3350r    1038 Mar 25 17:24 ArrayQueue.h
-rw-rwx---   1 dcalmes  ics3350r    1631 Feb 13 19:28 ArrayStack.cpp
-rw-rwx---   1 dcalmes  ics3350r     867 Feb 13 19:28 ArrayStack.h
-rw-rwx---   1 dcalmes  ics3350r    2317 Feb  8 22:21 BagInterface.h
-rw-r--r--   1 dcalmes  ics3350r    1347 Mar 25 17:25 QueueInterface.h
-rw-r--r--   1 dcalmes  ics3350r    1828 Feb 13 19:29 StackInterface.h
-rwxr-xr-x   1 dcalmes  ics3350r   20916 Apr  3 17:53 a.out
lrwxrwxrwx   1 dcalmes  ics3350r      25 Jan 18 07:19 lib -> /home/classes/cs3350r/Lib
-rw-rwx---   1 dcalmes  ics3350r   13511 Feb  9 00:22 pgm.log
-rw-rwx---   1 dcalmes  ics3350r   10186 Jan 18 17:20 pgm1.log
-rw-rwx---   1 dcalmes  ics3350r     724 Jan 18 17:17 pgm1BasicShape.h
-rw-rwx---   1 dcalmes  ics3350r    1182 Jan 18 17:17 pgm1Circle.h
-rw-rwx---   1 dcalmes  ics3350r    1103 Jan 18 17:17 pgm1Rectangle.h
-rw-rwx---   1 dcalmes  ics3350r    3661 Jan 18 17:17 pgm1main.cpp
-rw-rwx---   1 dcalmes  ics3350r    4149 Feb  9 00:16 pgm2bag.cpp
-rw-rwx---   1 dcalmes  ics3350r    1460 Feb  9 00:15 pgm2bag.h
-rw-rwx---   1 dcalmes  ics3350r    4180 Feb  9 00:19 pgm2main.cpp
-rw-rwx---   1 dcalmes  ics3350r    2712 Mar 20 15:16 pgm4.cpp
-rw-rwx---   1 dcalmes  ics3350r    6176 Mar 20 15:17 pgm4.log
-rw-r--r--   1 dcalmes  ics3350r    6417 Apr 25 08:37 pgm5.cpp
-rw-r--r--   1 dcalmes  user           0 Apr 25 08:40 pgm5.log
-rw-rwx---   1 dcalmes  ics3350r   20270 Mar 22 17:47 pgm6.log
-rw-rwx---   1 dcalmes  ics3350r    6493 Mar 22 17:46 pgm6first.cpp
-rw-rwx---   1 dcalmes  ics3350r    6579 Mar 22 17:45 pgm6mo3.cpp
-rw-r--r--   1 dcalmes  ics3350r    2827 Apr  3 17:51 pgm7.cpp
-rw-r--r--   1 dcalmes  user       10358 Apr  3 17:53 pgm7.log
drwxr-sr-x   2 dcalmes  ics3350r    1024 Apr 14 22:41 pgm8
sh-4.3$ 
sh-4.3$ 
sh-4.3$ cat pgm5.cpp
// Progrmmer:   Douglas G Calmes                        cs3350          M-W 6:00 - 7:20
// Program:             Program 5

#include <list>
#include <iostream>
#include <string>
#include <stdlib.h>
#include <iomanip>   
#include <cassert>
using namespace std;

// Function Prototypes
char clue1(list<string> &); 
int clue2(list<char> &, char);
int clue3(list<int> &, int);
unsigned long clue4(list<unsigned long> &, int);



int main()
{
        // Variables (Clues)
        list<string> listClue1;
        list<char> listClue2;
        list<int> listClue3;
        list<unsigned long> listClue4;
        // Variables (Iterators)
        list<string>::iterator iteratorString;
        list<char>::iterator iteratorChar;

        int q = 0;
        string temp;
        string message[10] = { "The", "secret", "to", "getting", "ahead", "is", "getting", "started", "Mark", "Twain" };

        // Creating an array of words and sotre them randomly into the list
        for (int i = 9; i > 0; i--){
                int j = rand() % i;
                temp = message[i];
                message[i] = message[j];
                message[j] = temp;
        }

        // Pusing the message that was shuffled into first list
        for (int i = 0; i < 10; i++){
                listClue1.push_back(message[i]);
        }

        int r = rand() % 10;
        iteratorString = listClue1.begin();

        while (q < r){
        q++;
                iteratorString++;

        }
        // Position that linky is getting put into
        *iteratorString = "Linky";

        // Randomly selecting letters from "linky" and store them in a list of length 10
        for (int i = 0; i < 10; i++){
                int ranNum1 = rand() % 5; 

                if (ranNum1 == 0){
                        listClue2.push_back('L');
                }
                else if (ranNum1 == 1){
                        listClue2.push_back('i');
                }
                else if (ranNum1 == 2){
                        listClue2.push_back('n');
                }
                else if (ranNum1 == 3){
                        listClue2.push_back('k');
                }
                else if (ranNum1 == 4){
                        listClue2.push_back('y');
                }
        }

        // Creating a list of length 10 and adding a random number between 0 and 24 to each position
        for (int i = 0; i < 10; i++){
                int ranNum2 = rand() % 24;

                listClue3.push_back(ranNum2);
        }

        for (int i = 0; i < 25; i++){
                unsigned long ranum = ((unsigned long)rand() * 123456789 + 100000000);

                listClue4.push_back(ranum);
        }

        // Function calls
        char one = clue1(listClue1);
        int two = clue2(listClue2, one);
        int three = clue3(listClue3, two);
        unsigned long four = clue4(listClue4, three);

        system("pause");
        return 0;

}

////////////////////////////////////////////////////////
// This function will seach listClue1 to find Linky
////////////////////////////////////////////////////////
char clue1(list<string> & listClue1) 
{
        char n;
        int pos = 1;
        list<string>::iterator iteratorString;
        iteratorString = listClue1.begin();

        // Find Linky
        for (int i = 0; i < 10; i++){
                if (*iteratorString == "Linky"){
                        break;
                }
                iteratorString++;
                pos++;
        }

        int j = pos % 5;

        if (j == 0){
                n = 'l';
        }
        else if (j == 1){
                n = 'i';
        }
        else if (j == 2){
                n = 'n';
        }
        else if (j == 3){
                n = 'k';
        }
        else if (j == 4){
                n = 'y';
        }

        cout << "##-------------------------------##" << endl;
        cout << "Clue 1 List" << endl;
        cout << "-----------------------------------" << endl;

        iteratorString = listClue1.begin();
        for (int a = 1; a < 10; a++){
                cout << a;
                cout << std::right << "  " << std::right << *iteratorString << endl;
                iteratorString++;
        }

        cout << "-----------------------------------" << endl;
        cout << "Clue 1 - 'Linky' found in position " << j << " in first list." << endl;
        cout << "Letter of 'Linky' to look for is " << n << endl;
        cout << "##-------------------------------##" << endl;

        return n;
}

////////////////////////////////////////////////////////
// This function will display list of "Linky" letters
//              Will return the position
////////////////////////////////////////////////////////
int clue2(list<char> & listClue2, char one){

        int num = 0;
        list<char>::iterator iteratorChar;
        iteratorChar = listClue2.begin();

        for (int i = 1; i < 11; i++){
                if (*iteratorChar == one){
                        num = i;
                }
                iteratorChar++;
        }

        cout << "##-------------------------------##" << endl;
        cout << "Clue 2 List" << endl;
        cout << "-----------------------------------" << endl;

        iteratorChar = listClue2.begin();

        for (int i = 1; i < 11; i++){
                cout << i << "  " << *iteratorChar << endl;
                iteratorChar++;
        }
        cout << "-----------------------------------" << endl;
        cout << "Clue 2 - last letter " << one << " found in location " << num << endl;
        cout << "##-------------------------------##" << endl;

        return num;
}

////////////////////////////////////////////////////////
// This function will traverse listClue3 and find the
// character found by the first funciton
////////////////////////////////////////////////////////
int clue3(list<int> & listClue3, int two){
        int temp = 0, i = 1;
        list<int>::iterator intiterator;

        for (intiterator = listClue3.begin(); intiterator != listClue3.end(); intiterator++){
                if (i == two)
                        temp = *intiterator;
                i++;
        }

        cout << "##-------------------------------##" << endl;
        cout << "Clue 3 List" << endl;
        cout << "-----------------------------------" << endl;
        intiterator = listClue3.begin();

        for (int k = 1; k < 11; k++){
                cout << setw(2) << k;
                cout << "  " << *intiterator << endl;
                intiterator++;
        }

        cout << "-----------------------------------" << endl;
        cout << "Clue 3 - number found in position " << two << " is " << temp << endl;
        cout << "##-------------------------------##" << endl;

        return temp;

}

unsigned long clue4(list<unsigned long> & listClue4, int three){
        int i = 1;
        unsigned long temp = 0;
        list<unsigned long>::iterator tempIiterator;
        listClue4.sort();

        for (tempIiterator = listClue4.begin(); tempIiterator != listClue4.end(); tempIiterator++){
                if (i == three){
                        temp = *tempIiterator;
                }
                i++;
        }

        cout << "##-------------------------------##" << endl;
        cout << "Clue 4 List" << endl;
        cout << "-----------------------------------" << endl;
        tempIiterator = listClue4.begin();

        for (int j = 1; j < 25; j++){
                cout << j;
                cout << "  " << *tempIiterator << endl;
                tempIiterator++;
        }
        cout << "-----------------------------------" << endl;
        cout << "Clue 4 - the " << three << " largest number and combination for the safe deposit box is " << temp << endl;
        cout << "##-------------------------------##" << endl;
        return temp;
}sh-4.3$ 
sh-4.3$ g++ pgm6 5.cpp 
[01m[Kpgm5.cpp:[m[K In function '[01m[Kint main()[m[K':
[01m[Kpgm5.cpp:97:16:[m[K [01;35m[Kwarning: [m[Kunused variable '[01m[Kfour[m[K' [-Wunused-variable]
  unsigned long four = clue4(listClue4, three);
[01;32m[K                ^[m[K
sh-4.3$ a.out
##-------------------------------##
Clue 1 List
-----------------------------------
1  to
2  ahead
3  started
4  The
5  getting
6  Twain
7  Linky
8  is
9  getting
-----------------------------------
Clue 1 - 'Linky' found in position 2 in first list.
Letter of 'Linky' to look for is n
##-------------------------------##
##-------------------------------##
Clue 2 List
-----------------------------------
1  y
2  n
3  y
4  L
5  L
6  k
7  y
8  k
9  n
10  i
-----------------------------------
Clue 2 - last letter n found in location 9
##-------------------------------##
##-------------------------------##
Clue 3 List
-----------------------------------
 1  14
 2  10
 3  23
 4  15
 5  15
 6  6
 7  15
 8  17
 9  10
10  8
-----------------------------------
Clue 3 - number found in position 9 is 10
##-------------------------------##
##-------------------------------##
Clue 4 List
-----------------------------------
1  408517655
2  480368603
3  838753330
4  992515516
5  1075171821
6  1228934007
7  1229989763
8  1251228153
9  1437717518
10  1518014095
11  1657555021
12  1808708844
13  2011096184
14  2555970276
15  2646140981
16  2709856570
17  2726002761
18  3236907756
19  3323414342
20  3396445154
21  3714215978
22  3800598456
23  3810410530
24  4182022815
-----------------------------------
Clue 4 - the 10 largest number and combination for the safe deposit box is 1518014095
##-------------------------------##
sh: pause: not found
sh-4.3$ exit
exit

script done on Tue Apr 25 08:41:17 2017
